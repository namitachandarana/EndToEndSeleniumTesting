Anything you see on the browser can be automated using selenium
Can be used on multiple browsers
number one automation tool available in the market
code can be written in multiple languages: Java, c#, Python, Ruby, PHP, Javascript
Majorly java selenium is used in the industry and java is most popular to use with selenium
Core concepts is the same, only syntax changes for languages
Selenium parent had 2 different tools: IDE and Webdriver, IDE is record and playback tool, not used much in real world.
Webdriver helps create robust browser testing
Selenium is not a tool its only a jar file
Selenium is lightweight as there is no tool

Every browser has its own driver session
When triggering the code for selenium all of the code is converted to JSON format

Read code, get path of bowser driver and pass the code in JSON format

Things required for starting to work on selenium:
1) Download the latest java version - just download jdk - refer to lecture 8 resources if not sure
Check for Java folder in C: Program Files or Program Files (x86)
2) set the java path, get the java home path, go inside the jdk folder and get the path. Got to control panel, select advanced system sesstings
click on environment variables, add a variable called JAVA_HOME: add the link to the jdk home path
3) get the bin path of the jdk and add it to path variable on the environment variables under control panel
4) Refer to lecture 9 for setting JAVAHOME in mac
5)Eclipse wont open if Java is not installed, you need eclipse ide for java developers
6) Got to project structure to add selenium jars
7) Check your chrome browser and make sure its the same version, go to settings in the chrome browser and then about
8) Get the drivers from the selenium website

MAC Users:
Setting p chrome driver: Refer to Lecture 17


id locator can change when the page is refreshed its important to check and not the most reliable way
alphanumerice ids (combination of alphabets and letters) not ideal to use to locate elements

Preferable locators to use are CSS and XPath

The object is a link when the a/anchor tag is used

Classnames should not have space, if there are spaces they cannot be used with class name attribute but can be used with xpath attribut

Selenium scrolls from top left , if the value of 2 attributes is the same it will by default select the first one and selenium will not throw an error

XPath Syntax: //*[@attribute='value'], xpaths can also be found by right clicking, copy Xpath
XPaths Starting with html are not reliable

Below works for firefox and chrome browsers
$x("") To validate that xpaths are correct go to firefox and on the console type $x("//*[@attribute='value']") Class name can be used instead of regular expression
$("") To validate that css is correct go to firefox and on the console type $("#id")
css syntax:
1) tagname[attribute='value']
2) Another css syntac = tagname.classname
3) tagname#id - tagname can be skipped only #id can be used
4) input#username


Regular Expression:
//tagName[contains(@attribute, 'value')] - xpath
tagName[attribute*='value']

if attribute value is too long regular expression xpaths and css can be used

XPaths can be identified using parent

Refer to lecture 38 again to understand XPaths
ChroPath can generate XPath and CSS refer lecture 39

Relative and absolute XPath
Relative XPath does not depend on parent node Lecture 40
Absolute XPath depends on parent node
Relative Xpaths are preferred over absolute XPaths

Syntax to traverse between siblings: .//*[@is='tablist']/following-sibling::li[1]

Major difference between css and xpath is with xpath you can traverse back from child to parent. Cant do that it CSS

Another way to find elements on the screen is by using text only syntax: //*[text() = ' Soap UI']

Parent child relationship is when there is no slash between the 2
whereas parent child traveresing is when you put / to reach the child



Areas to revisit: XPaths, Autosuggestive drop downs